import { Team } from "../../common/types";

import { Quote } from "../../common/types";
import { LeaderboardCountdown } from "./LeaderboardCountdown";
import { LeaderboardLayout } from "./LeaderboardLayout";
import { getVisibleScore } from "./util/getVisibleScore";
import { teamBgColors } from "./util/teamBgColors";

export function LeaderboardInGame({
  currentQuote,
  currentQuoteIndex,
  isRoundDecided,
  activeTeams,
  timeRemaining,
}: {
  currentQuote: Quote;
  currentQuoteIndex: number;
  isRoundDecided: boolean;
  activeTeams: Team[];
  timeRemaining: number;
}) {
  const correctAnswer = currentQuote.options[currentQuote?.correctOptionIndex];
  return (
    <LeaderboardLayout>
      <div className="flex gap-8 items-start w-full">
        <div className="w-full grid gap-8">
          <div className="grid gap-4 content-start text-left">
            <p className="text-2xl">This quote:</p>
            <p className="text-4xl font-bold">
              &ldquo;{currentQuote.quote}&rdquo;
            </p>
          </div>
          {isRoundDecided && (
            <div className="grid gap-4 content-start text-left">
              {correctAnswer.toLowerCase() !== "ai generated" ? (
                <>
                  <p className="text-2xl">Was said in this movie:</p>
                  <p className="text-4xl font-bold">{correctAnswer}</p>
                </>
              ) : (
                <p className="text-2xl">Was generated by AI.</p>
              )}
            </div>
          )}
          {!isRoundDecided && (
            <>
              <div className="grid gap-4 text-left">
                <p className="text-2xl">Could have been said in:</p>
                <ul className="list-disc list-inside grid gap-2">
                  {currentQuote.options.map((option) => (
                    <li className="text-4xl font-bold" key={option}>
                      {option}
                    </li>
                  ))}
                </ul>
              </div>
            </>
          )}
        </div>
        <div className="w-1/3 grid gap-4 content-start">
          <h2 className="text-2xl">Leaderboard</h2>
          <ul className="w-full mx-auto">
            {activeTeams.map((team) => (
              <li
                key={team.id}
                className={`rounded text-center text-3xl font-bold bg-${
                  teamBgColors[team.id]
                } mb-2 h-24 flex items-center p-4`}
              >
                <p className="flex-grow text-left">Team {team.id}</p>
                <p>{getVisibleScore(team, currentQuoteIndex)} points</p>
              </li>
            ))}
          </ul>
        </div>
      </div>
      {(timeRemaining > 0 || !isRoundDecided) && (
        <div className="grid gap-4 mt-auto">
          <h2 className="text-2xl text-center">Seconds Remaining</h2>
          <LeaderboardCountdown timeRemaining={timeRemaining} />
        </div>
      )}
    </LeaderboardLayout>
  );
}
